/*
剑指 Offer 60. n个骰子的点数
把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。

 

你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

 

示例 1:

输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
示例 2:

输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 

限制：

1 <= n <= 11

https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/
*/ 

// 思路：动态规划，从一个骰子开始，每加入一个新的骰子的时候，累计计算概率
/**
 * @param {number} n
 * @return {number[]}
 */
 var dicesProbability = function(n) {

    // 初始化一个骰子时候的所有概率
    let dp = new Array(6).fill(1.0/6)

    for(let i = 2; i <= n; i++) {
        let temp = new Array(5*i+1).fill(0)   // 临时数组的长度为  6*n - (n-1) = 5*n+1 加入一个骰子后，两个骰子投出的最大值为 6*n 最小值为 n, 计算值区间就是 [n,6n], 总共 5n+1 个空间，这里记得初始数组的时候要赋值 0，否则以下做加法操作的时候会出错
        

        // 值区间中每个位置的数值，分别加上 1-6 的情况后，出现的概率，这里无需关心具体的数值，只需要累加概率就好
        for(let j = 0; j < dp.length; j++) {
            for(let k = 0; k < 6; k++) {
                temp[j+k] += (dp[j]/6.0)
            }
        }

        dp = temp
    }

    return dp
};
