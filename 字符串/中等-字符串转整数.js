/*

剑指 Offer 67. 把字符串转换成整数

写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。

 

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/ 


// 思路：耐心把题目看完，按题目的意思逐步完成代码，考虑边界的情况，即可顺利完成
// 这题最好按字符的顺序，从左往右逐个处理比提前预处理字符串要来的更加简便
/*
1. 从左往右，如果为连续的空格则跳过处理
2. 跳过空格后，查看当前字符是否是符号，如果是符号则记录正负值
3. 逐个处理接下来的字符，如果是数字则累加记录，若是其它字符则直接退出
4. 每次判断当前数字是否大于 max 或者小于 min, 若超出边界也是直接返回边界值

*/ 


/**
 * @param {string} str
 * @return {number}
 */
var strToInt = function(str) {

  if(!str || str === ' ') return 0

  let length = str.length

  let num = 0
  let cur = 0
  let sign = 1

  while(cur < length && str[cur] === ' ') {
      cur++
  }
  if(cur < length && (str[cur] === '-' || str[cur] === '+')) {
      sign = str[cur] === '-' ? -1 : 1
      cur++
  }
  for(let i = cur; i < length; i++) {
      if(str[i].charCodeAt()>=48 && str[i].charCodeAt() <= 57) {
          num = num*10 + Number(str[i])
      } else {
          break;
      }
      if(num*sign >= Math.pow(2,31)-1) {
          return Math.pow(2,31)-1
      }
      if(num*sign <= -Math.pow(2,31)) {
          return -Math.pow(2,31)
      }

  }
  return num*sign
};
console.log(strToInt("--0000243"))
