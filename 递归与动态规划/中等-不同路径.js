/*
62. 不同路径
    
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？



例如，上图是一个7 x 3 的网格。有多少可能的路径？

 

示例 1:

输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右
示例 2:

输入: m = 7, n = 3
输出: 28
 

提示：

1 <= m, n <= 100
题目数据保证答案小于等于 2 * 10 ^ 9

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-paths
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/



/*
  思路：机器人走到当前的格子，路径有两种选择，一种是从左边的格子来，一种是从上边的格子来，当前格子的路径总数为到达左边格子的路径总数加上到达上边格子的路径总数，所以状态转移方程可以列为: 

    dp[i][j] = dp[i-1][j] + dp[i][j-1]

  当机器人走第一列和第一行的任意格子的时候，都只有一种路径，因为第一行没有上边的格子，只能从左边来，第一列没有左边的格子，只能从上边的格子来。计算的时候，可以先初始化第一行和第一列的结果，每个格子的路径数均为1种。

  最后取 dp[n-1][m-1], 即得到最后的一个格子有多少种走法。

*/



/**
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var uniquePaths = function (m, n) {
  let dp = Array.from({
    length: n + 1
  }, () => [])
  for (let i = 0; i < n; i++) {
    dp[i][0] = 1
  }
  for (let i = 0; i < m; i++) {
    dp[0][i] = 1
  }

  for (let i = 1; i < n; i++) {
    for (let j = 1; j < m; j++) {
      dp[i][j] = dp[i][j - 1] + dp[i - 1][j]
    }
  }
  return dp[n - 1][m - 1]

};
